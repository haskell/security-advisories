name: Check and publish security advisories
on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
jobs:
  check-advisories:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          path: source
          # We need to retrieve full history to determine the correct
          # `published` and `modified` timestamps
          fetch-depth: 0
      - run: mkdir -p ~/.local/bin
      - id: download
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: ~/.local/bin
      - run: chmod +x ~/.local/bin/hsec-tools
      - name: Run advisory syntax checks
        run: |
          cd source
          RESULT=0
          # Remove the begining of the README to extract the example.
          (echo '```toml'; sed -e '1,/```toml/d' README.md) > EXAMPLE_README.md
          while read FILE ; do
            echo -n "$FILE: "
            hsec-tools check "$FILE" || RESULT=1
          done < <(find advisories EXAMPLE_README.md EXAMPLE_ADVISORY.md -type f -name "*.md")
          exit $RESULT
      - name: Run advisory uniqueness checks
        run: |
          ! find source/advisories -name '*.md' -print0 \
            | xargs -0n1 basename | sort | uniq -c | grep -E -v '[[:space:]]*1 '
      - name: Publish OSV data
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' && github.repository == 'haskell/security-advisories' }}
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          DATA_DIR=$PWD/osv
          mkdir "$DATA_DIR"
          cd source
          while read FILE ; do
            ID=$(basename "$FILE" .md)
            YEAR=$(echo "$ID" | cut -d - -f 2)
            mkdir -p $DATA_DIR/$YEAR
            hsec-tools osv "$FILE" > $DATA_DIR/$YEAR/$ID.json
          done < <(find advisories -type f -name "*.md")
          BRANCH=generated/osv-export
          REF=refs/remotes/origin/$BRANCH
          export GIT_WORK_TREE=$DATA_DIR
          git read-tree "$REF"
          git add --all --intent-to-add
          git diff --quiet && exit
          git add --all
          TREE=$(git write-tree)
          git config user.email security-advisories@haskell.org
          git config user.name "Haskell Security Response Team"
          COMMIT=$(git commit-tree "$TREE" -p "$REF" -m "$(date --utc --rfc-3339=seconds) ($GITHUB_SHA)")
          git push origin $COMMIT:$BRANCH

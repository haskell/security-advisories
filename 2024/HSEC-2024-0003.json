{"affected":[{"package":{"ecosystem":"Hackage","name":"process"},"ranges":[{"events":[{"introduced":"1.0.0.0"},{"fixed":"1.16.19.0"}],"type":"ECOSYSTEM"}],"severity":[{"score":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H","type":"CVSS_V3"}]}],"aliases":["VU#123335"],"details":"# process: command injection via argument list on Windows\n\nThe *process* library on Windows is vulnerable to a command injection\nvulnerability, via `cmd.exe`'s interpretation of arguments.  Processes that\ninvoke batch files (`.bat`, `.cmd`) and pass arguments whose values are\naffected by program inputs may be affected.\n\nThis issue was discovered in many programming languages' Windows process\nexecution behaviour.  It was tracked by CERT/CC as **VU#123335** and a\ncoordinated disclosure was made on 2024-04-09 17:00 UTC.\n\n\n## Background\n\nUnlike POSIX systems, Windows does not have a mechanism for passing multiple\narguments.Command line parsing is up to individual programs.\n\nThe *process* library defines the `RawCommand` constructor for specifying an\nexecutable and its arguments:\n\n```haskell\ndata CmdSpec\n  = ShellCommand String\n  | RawCommand FilePath [String]\n```\n\nOn Windows, the `RawCommand` executable name and arguments are serialised into\na single *command line* string, with separate arguments quoted separately.\n*process* then invokes the Windows [`CreateProcess`][doc-CreateProcess]\nroutine with this command line string is given as the `lpCommandLine`\nargument.\n\n\n## Issue\n\nWhen executing `.bat` or `.cmd` files, [`CreateProcess`][doc-CreateProcess]\nimplicitly spawns `cmd.exe`.  The `System.Process` command line construction\ndoes not escape characters with special meaning to `cmd.exe`.  As a\nconsequence, a command injection vulnerability arises when the following\nconditions are satisfied:\n\n- Program running on Windows\n- Program executes a `.bat` or `.cmd` file\n- The argument values include or are influenced by program input\n\n\n## Demonstration\n\nThe following batch file, `test.bat`, merely prints the executable name the\nfirst two arguments (as interpreted by `cmd.exe`):\n\n```\n@ECHO OFF\nECHO 0: %0\nECHO 1: %1\nECHO 2: %2\nPAUSE\n```\n\nThe following Haskell program executes `test.bat` with basic string arguments.\nThe output is as expected:\n\n```\nλ> readProcess \"test.bat\" [\"a\",\"b\"] [] >>= putStrLn\n0: \"test.bat\"\n1: \"a\"\n2: \"b\"\n```\n\nHowever, we can use a close quote and the `&` character to induce `cmd.exe` to\nexecute a program named in the argument:\n\n```\nλ> readProcess \"test.bat\" [\"\\\"&calc.exe\"] [] >>= putStrLn\n0: \"test.bat\"\n1: \"\\\"\n2:\n```\n\nIn addition to producing the above output, `calc.exe` is executed.\n\n\n## Mitigation\n\nThe lack of a general mechanism on Windows for safely conveying command line\narguments to programs increases the risk of this kind of security issue.  The\nfact that `cmd.exe` command line parsing is complex and poorly documented\nexacerbates this issue, and also heightens the risk that the fix is\nincomplete, or causes other issues.\n\nIf possible, avoid executing batch files where arguments include or are\ninfluenced by untrusted program inputs.  If it must be done, reject arguments\nthat include special characters including `&` and `\"`.\n\n\n## Fix versions\n\n*process* was modified to perform additional escaping and quoting\nwhen executing `.bat` and `.cmd` files on Windows.\n\nThe fix was released in ***process-1.16.19.0***.  It will be\nincluded in the next GHC 9.10 alpha.\n\nSuch a change in semantics should normally result in a major version\nbump.  Because we expect very few (if any) users are affected by\nthis vulnerability, the GHC team made a pragmatic decision to avoid\nthe disruption that a major version bump would cause.\n\nBackports to earlier releases of *process* for still-maintained\nbranches of GHC will be considered in accordance with the regular\nrelease schedule.\n","id":"HSEC-2024-0003","modified":"2024-04-09T22:14:47Z","published":"2024-04-09T22:14:47Z","references":[{"type":"ARTICLE","url":"https://flatt.tech/research/posts/batbadbut-you-cant-securely-execute-commands-on-windows/"}],"related":["CVE-2024-1874","CVE-2024-24576","CVE-2024-22423"],"schema_version":"1.5.0","summary":"process: command injection via argument list on Windows"}
